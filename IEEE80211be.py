from enum import Enum
from typing import Dict, List, Optional, Tuple

# Define Bandwidth Enum for 802.11be
class Bandwidth(Enum):
    BW20 = 'BW20'
    BW40 = 'BW40'
    BW80 = 'BW80'
    BW160 = 'BW160'
    BW320 = 'BW320'

class IEEE80211be:
    """Class to encapsulate 802.11be (Wi-Fi 7) properties and MCS data."""

    # MCS data structure: {index: (modulation, coding_rate, {bw: {gi: data_rate}})}
    MCS_DATA = {
        0:  ("BPSK", "1/2", {
            20: {3200: 7, 1600: 8, 800: 9},
            40: {3200: 15, 1600: 16, 800: 17},
            80: {3200: 31, 1600: 34, 800: 36},
            160: {3200: 61, 1600: 68, 800: 72},
            320: {3200: 123, 1600: 136, 800: 144}
        }),
        1:  ("QPSK", "1/2", {
            20: {3200: 15, 1600: 16, 800: 17},
            40: {3200: 29, 1600: 33, 800: 34},
            80: {3200: 61, 1600: 68, 800: 72},
            160: {3200: 122, 1600: 136, 800: 144},
            320: {3200: 245, 1600: 272, 800: 288}
        }),
        2:  ("QPSK", "3/4", {
            20: {3200: 22, 1600: 24, 800: 26},
            40: {3200: 44, 1600: 49, 800: 52},
            80: {3200: 92, 1600: 102, 800: 108},
            160: {3200: 184, 1600: 204, 800: 216},
            320: {3200: 368, 1600: 408, 800: 432}
        }),
        3:  ("16-QAM", "1/2", {
            20: {3200: 29, 1600: 33, 800: 34},
            40: {3200: 59, 1600: 65, 800: 69},
            80: {3200: 123, 1600: 136, 800: 144},
            160: {3200: 245, 1600: 272, 800: 282},  # Note: 282 seems like a typo; should be 288?
            320: {3200: 490, 1600: 544, 800: 577}
        }),
        4:  ("16-QAM", "3/4", {
            20: {3200: 44, 1600: 49, 800: 52},
            40: {3200: 88, 1600: 98, 800: 103},
            80: {3200: 184, 1600: 204, 800: 216},
            160: {3200: 368, 1600: 408, 800: 432},
            320: {3200: 735, 1600: 817, 800: 865}
        }),
        5:  ("64-QAM", "2/3", {
            20: {3200: 59, 1600: 65, 800: 69},
            40: {3200: 117, 1600: 130, 800: 138},
            80: {3200: 245, 1600: 272, 800: 288},
            160: {3200: 490, 1600: 544, 800: 576},
            320: {3200: 980, 1600: 1089, 800: 1153}
        }),
        6:  ("64-QAM", "3/4", {
            20: {3200: 66, 1600: 73, 800: 77},
            40: {3200: 132, 1600: 146, 800: 155},
            80: {3200: 276, 1600: 306, 800: 324},
            160: {3200: 551, 1600: 613, 800: 649},
            320: {3200: 1103, 1600: 1225, 800: 1297}
        }),
        7:  ("64-QAM", "5/6", {
            20: {3200: 73, 1600: 81, 800: 86},
            40: {3200: 146, 1600: 163, 800: 172},
            80: {3200: 306, 1600: 340, 800: 360},
            160: {3200: 613, 1600: 681, 800: 721},
            320: {3200: 1225, 1600: 1361, 800: 1441}
        }),
        8:  ("256-QAM", "3/4", {
            20: {3200: 88, 1600: 98, 800: 103},
            40: {3200: 176, 1600: 195, 800: 207},
            80: {3200: 368, 1600: 408, 800: 432},
            160: {3200: 735, 1600: 817, 800: 865},
            320: {3200: 1470, 1600: 1633, 800: 1729}
        }),
        9:  ("256-QAM", "5/6", {
            20: {3200: 98, 1600: 108, 800: 115},
            40: {3200: 195, 1600: 217, 800: 229},
            80: {3200: 408, 1600: 453, 800: 480},
            160: {3200: 817, 1600: 907, 800: 961},
            320: {3200: 1633, 1600: 1815, 800: 1922}
        }),
        10: ("1024-QAM", "3/4", {
            20: {3200: 110, 1600: 122, 800: 129},
            40: {3200: 219, 1600: 244, 800: 258},
            80: {3200: 459, 1600: 510, 800: 540},
            160: {3200: 919, 1600: 1021, 800: 1081},
            320: {3200: 1838, 1600: 2042, 800: 2162}
        }),
        11: ("1024-QAM", "5/6", {
            20: {3200: 122, 1600: 135, 800: 143},
            40: {3200: 244, 1600: 271, 800: 287},
            80: {3200: 510, 1600: 567, 800: 600},
            160: {3200: 1021, 1600: 1134, 800: 1201},
            320: {3200: 2042, 1600: 2269, 800: 2402}
        }),
        12: ("4096-QAM", "3/4", {
            20: {3200: 131, 1600: 146, 800: 155},
            40: {3200: 263, 1600: 293, 800: 310},
            80: {3200: 551, 1600: 613, 800: 649},
            160: {3200: 1103, 1600: 1225, 800: 1297},
            320: {3200: 2205, 1600: 2450, 800: 2594}
        }),
        13: ("4096-QAM", "5/6", {
            20: {3200: 146, 1600: 163, 800: 172},
            40: {3200: 293, 1600: 325, 800: 344},
            80: {3200: 613, 1600: 681, 800: 721},
            160: {3200: 1225, 1600: 1361, 800: 1441},
            320: {3200: 2450, 1600: 2722, 800: 2882}
        }),
        14: ("BPSK-DCM-DUP", "1/2", {
            80: {3200: 7, 1600: 8, 800: 9},
            160: {3200: 15, 1600: 17, 800: 18},
            320: {3200: 31, 1600: 34, 800: 36}
        }),
        15: ("BPSK-DCM", "1/2", {
            20: {3200: 4, 1600: 4, 800: 4},
            40: {3200: 7, 1600: 8, 800: 9},
            80: {3200: 15, 1600: 17, 800: 18},
            160: {3200: 31, 1600: 34, 800: 36},
            320: {3200: 61, 1600: 68, 800: 72}
        })
    }

    VALID_GI = [3200, 1600, 800]  # Guard Intervals in ns
    VALID_BW = [20, 40, 80, 160, 320]  # Bandwidths in MHz

    def __init__(self):
        """Initialize the IEEE80211be class."""
        pass

    def get_mcs_info(self, mcs_index: int) -> Tuple[str, str, Dict]:
        """Returns modulation type, coding rate, and data rates for a given MCS index."""
        if mcs_index not in self.MCS_DATA:
            raise ValueError(f"MCS index {mcs_index} is not valid for 802.11be")
        modulation, coding_rate, data_rates = self.MCS_DATA[mcs_index]
        return modulation, coding_rate, data_rates

    def get_data_rate(self, mcs_index: int, bandwidth: int, gi: int) -> Optional[float]:
        """Returns the data rate (Mbit/s) for a specific MCS, bandwidth, and guard interval."""
        if mcs_index not in self.MCS_DATA:
            raise ValueError(f"MCS index {mcs_index} is not valid")
        if bandwidth not in self.VALID_BW:
            raise ValueError(f"Bandwidth {bandwidth} MHz is not valid")
        if gi not in self.VALID_GI:
            raise ValueError(f"Guard Interval {gi} ns is not valid")

        _, _, data_rates = self.MCS_DATA[mcs_index]
        return data_rates.get(bandwidth, {}).get(gi, None)

    def get_valid_bandwidths(self) -> List[str]:
        """Returns a list of valid bandwidths as strings (e.g., 'BW20')."""
        return [bw.value for bw in Bandwidth]